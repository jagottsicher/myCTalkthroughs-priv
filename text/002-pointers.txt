












[Intro] Jingle
[Quote] Jingle

[Video Pointer] Pointer/
3 Secs

Pointers ...
Well, pointers ... in the C programming language ...
You may not be ready for them. 

But despite the fact the video clip before has not much to do with pointers, for some programming beginners they're a sustainable source of coonfusion when facing them the first time. Anyway, I will talk you through pointers in under thirty minutes. I'll try at least. Welcome to myCTalktroughs. 

So, Pointers, as I claimed in the title above in this video I am going to reveal "Everything you always wanted to know about pointers* *but were afraid to ask". For that I need to to hurry myself some -- and when I say myself I mean you!

Wubba Lubba Dub Dub, here we go! 

There are five big questions to answer:

I. 
What are pointers? which also answers why they exist at all.
IT's simple. 

II. 
What are pointers used for?
The simple use case, scope and mutation of values.

III.
What have pointers to do with strings?
(as strings are not a distinct type in C)
Let's check a use case for pointer arithmetics

IV.
What is pointer arithmetics then?
We saw already, but here the explanantion shown at an example of a composite type (struct) and to.
Another thing is creating lists by using pointers only.

V. 
And what else is going on with Pointers?
totally useless but hard to wrap your head around example, but let's put the whole head in the rabbit hole here!

After that, you should be ready to be released into the wild of pointers and survive at least for a respectable while.

Number one:
What are pointers and why there is a need for them? 
First of all: don't worry pointersin C are not that complicated to understand. the hard part is pointer arithmetic. But later about that.

Together idea and the need of pointers come with your memory. Well, not your memory, but the one in your computer. Imagine your computer's memory as some little boxes. maybe not so much like post boxes, but like like po boxes you can rent and let your post be sent to. This boxes are usually available in some store or post office, can have different sizes, but usually are arranged in a sequential order. And to identify them they are just numbered consecutively. No rocket science so far.

And pretty much the same your RAM is organized. 

And let's say you have a value you want your computer to remember (like this little thing here) you check the size and put it somewhere. better to say your computer puts it somewhere. And to find it again, the computer remembers where that value is stored. and that is this number here. 

So, what is the syntax for that in C?

// To integer with the identifier x assign 23 as a value
int x = 23;

That has already something, but not much about pointers. Pointer is a agreement that you can not only stored the value in some box, you can also store the number as a value. 

// To the pointer to an integer with identifier ptr_x assign the place in memory where the x is located.
int * ptr_x = &x;

The asterisk here belongs to the type, not to the identifier or the value. It indicates that we're creating not an integer value but we want to create something pointing to an integer value. it is something like an name card.

And that asterisk is reused in the case we want to use that name card to find the address of someone.

z = *ptr_x;
Here the asterisk is used with any kind of type around. The meaning changes to something called dereferencing the value. One could say:
to the integer with identifier z assign the value which is stored at the spot where ptr_x points to.

So first puzzle solved: A Pointer is a value which indicates where some value of distinct type is stored.


We come to question number two: What are pointers good for?

One thing they are very good for also has to do with your memory. Memory you can roughly differ between the so called stack and the heap. Greatly simplified the stack is used by any instruction your computer executes to work from and due to it's proper order it is very fast to work from and on the stack. But it has also disadvantages and one is that you need to know at compile time what to put there to make use of it. Also the size is limited and if you want dynamically allocate memory - and in C you as a programmer are fully responsable for both allocating and freeing memory - you quickly come into trouble. But there's a solution for that and that is the heap. I like to imagine that as a heap of boxes and that boxes are also numbered but what you're looking for when allocating memory is a chunk of sequential ordered boxes which are all empty and large enough to place your values in. 

The only thing you need to know now is where you want to start writing your values and for that you can use a pointer.

but a far more essential justification for the existence of pointers is the mutation of values "out of scope", for example in a function. Here it is about the actual function as pointer.

Example und Anwendungsbeispiel

You can do so much more with pointers and especially system programmers juggle pointers like artists at a fun fair.

But there is another very obvious application for pointers and I'll show it to you right here:

Question number 3 
What have pointers to do with strings?
I have bad news for you: Strings are not a distinct type in the C programming language. 

So what is a string then? 
In C a string is defined as an array of characters which is terminated by a specific control character.

So "Hello, world" is in the reality of your computer's memory an array of H e l l o,  w o r l d and eventually \0. Backslash zero does not mean twio characters in C. the preceding backslash only indicates that the zero shall be not interpreted as a value, but as "end of the string". 

And here pointers come into play. All characters are in a row, right. So no need to keep all the letters in mind. You only need to remember the spot the first character of your string resides and then your skip over the array char by char, because you know how much space a char needs. An if you match a "\0" then you know here the string ends, the array may continue though. and that is exactly what a string is defined in C: A pointer which points to address of some memory storing the beginning of an array of consecutive stored characters.

And that leads us directly to pointer arithmetic.

Question Number four is: 
What is pointer arithmetics?

we know already that it is possible to pass a pointer value only instead of passing all the vlaues stored around. so we spare all that copying, finding new space, reserving new memory, storing the data, manipulation the data, copying the data again, freeing the memory and pasting the data at a desired spot. 
With that capability you can now create arbitraty chunks of memory and create lists over which single parts you can easily directly access - as long you now the width of the single involved data types. And with that you can then create so called linked lists which you can quickly search in or iterate over. and you can links structures even foreward and backwards and create double-linked lists and so forth. And for all that you can use pointer erithmetics. And I promised you before to explain that to you. 

And I redeem this promise with a simple example of iteration over a string. 

example "Hello, World"
in memory "Hello, world\0"

if accesses as an array:
string[0] should be 'H', but we get a Value only, which needs to interpreted.

printf("%c\n", string[0])

OR

With a pointers we can point to the first element of the string.

Pointer to H. 

ptr_c++ means the pointer will move to the right (in reality it moves to the left but let's not get confused by details now.)

so again ++ and then we can also go 4 units farer with +4. If you add something to the pointer you do not assign a new value to the memory at that spot. you skip forward a few units with your pointer. and you can even go out of scope by -y and +x. That is pointer arithmetic. And if you shrug your shoulder now let me tell you it is awesome! Due to the fact you don't need to read or write anything when moving pointers is really really fast! If you manage pointers you can nearly access anything in low to no time in your computer. And that makes pointers a very mighty tool and essential for system programming and time critical appilcations. 

but it comes with a trade-off. it is fast, but you really need not only to organize your memory from the beginning, claim it, initialize it, use it, and free it later if you handle the access with pointers you need to know every little piece and pointer arthmetics has no limits and not security nets. If you run out of scope with your pointers you easily create a mess. in best case your application will not work, in worst case you access memory of the system, other applications or even create bad bad damage in running processes.

Even before Peter Parker you should have been aware great power comes with great responsibility.

That makes the last question here: 
What else one can do with pointers?

Besides als the Joker-like destructive tendencies which come to mind now with pointer you can do all kinds of crazy stuff. And that is a curse as well as a gift. to do the real hard stuff you need to be a by far better coder than I am one. So I stick here to something kind of easy, but stunning example to show you how the pointeres work as pointer to specific types to access chunks of your memory.

That is because pointers are nothing else but addresses and a pointer is always related to y tyxpe to inform your programm "how far to read or write data" from the pointer. 









Let's check a use case for pointer arithmetics

Use case for pointers, die nach ihrem Nutzen von Pointern in C unterschieden werden k√∂nnen. Die Nutzen sind im allgemeinen, um auf einen bestimmten Speicherbereich zu zeigen und den Werte dort zu lesen oder schreiben, und im Besonderen in C (und seinen enegen Verwandten c++ und c#, um Pointer arithemtic anzuwenden.

Zwei sehr h√§ufig anzutreffende F√§lle:
1. Value mutation "out of scope", for example in a function. Hier geht's um die eigentlich Funktion als Zeiger.
2. Iteration durch Speicherbereiche, zum Beispiel den Fall eines "string", der in C ein Array von Characaters definiert ist. Dann geht es um die Funktion zur Iteration √ºber zusammengesetzte datentypen.

Beipsiel 1:
Werte au√üerhalb des Scopes √§ndern. Zwei Vorteile: Problem des Scopes wird umgangen, zweites, ist ein Pointer deutlich kleiner als ein gro√üer Datentyp. Es wird also deutlich weniger Speicher umhergeschoben.

Beispiel 2:
Pointer arithemtic: machen wir mal was mit Strings.

Beispiel 3: etwas off-tpoic, aber f√§llt unter, was sonst noch geht.












