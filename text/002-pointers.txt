












[Intro] Jingle
[Quote] Jingle

[Video Pointer] Pointer/
3 Secs

Pointers ...
Well, pointers ... in the C programming language ...
You may not be ready for them. 

But despite the fact the video clip before has not much to do with pointers, for some programming beginners they're a sustainable source of coonfusion when facing them the first time. Anyway, I will talk you through pointers in under thirty minutes. I'll try at least. Welcome to myCTalktroughs. 

So, Pointers, as I claimed in the title above in this video I am going to reveal "Everything you always wanted to know about pointers* *but were afraid to ask". For that I need to to hurry myself some -- and when I say myself I mean you!

Wubba Lubba Dub Dub, here we go! 

There are five big questions to answer:

I. 
What are pointers? which also answers why they exist at all.
IT's simple. 

II. 
What are pointers used for?
The simple use case, scope and mutation of values.

III.
What is pointer arithmetics then?
We saw already, but here the explanantion shown at an example of a composite type (struct) and to.
Another thing is creating lists by using pointers only.

IV.
What have pointers to do with strings?
(as strings are not a distinct type in C)
Let's check a use case for pointer arithmetics

V. 
And what else is going on with Pointers?
totally useless but hard to wrap your head around example, but let's put the whole head in the rabbit hole here!

After that, you should be ready to be released into the wild of pointers and survive at least for a respectable while.

Number one:
What are pointers and why there is a need for them? 
First of all: don't worry pointersin C are not that complicated to understand. the hard part is pointer arithmetic. But later about that.

Together idea and the need of pointers come with your memory. well, not your memory, but the one in your computer. Imagine your computer's memory as some little boxes. maybe not so much like post boxes, but like like po boxes you can rent and let your post be sent to. This boxes are usually available in some store or post office, can have different sizes, but usually are arranged in a sequential order. And to identify them they are just numbered.  




Real world analogy as a postbox and content. and a content which point to another postbox.

Here we go about a similar example about memory.

So, what is the syntax for that?

int x = 23;
To integer with the identifier x assign 23 as a value.

int * ptr_x = &x;
To the pointer to an integer with identifier ptr_x assign the place in memory where the x is located.

The asterisk here belongs to the type, not to the identifier or the value. It indicates that we're creating not an integer value but we want to create something pointing to an integer value. it is something like an name card.

And that asterisk is reused in the case we want to use that name card to find the address of someone.

z = *ptr_x;
Here the asterisk is used with any kind of type around. The meaning changes to something called dereferencing the value. One could say:
to the integer with identifier z assign the value which is stored at the spot where ptr_x points to.


Example here are usuall lists, but we take something else.

Use case for pointers, die nach ihrem Nutzen von Pointern in C unterschieden werden können. Die Nutzen sind im allgemeinen, um auf einen bestimmten Speicherbereich zu zeigen und den Werte dort zu lesen oder schreiben, und im Besonderen in C (und seinen enegen Verwandten c++ und c#, um Pointer arithemtic anzuwenden.

Zwei sehr häufig anzutreffende Fälle:
1. Value mutation "out of scope", for example in a function. Hier geht's um die eigentlich Funktion als Zeiger.
2. Iteration durch Speicherbereiche, zum Beispiel den Fall eines "string", der in C ein Array von Characaters definiert ist. Dann geht es um die Funktion zur Iteration über zusammengesetzte datentypen.

Beipsiel 1:
Werte außerhalb des Scopes ändern. Zwei Vorteile: Problem des Scopes wird umgangen, zweites, ist ein Pointer deutlich kleiner als ein großer Datentyp. Es wird also deutlich weniger Speicher umhergeschoben.

Beispiel 2:
Pointer arithemtic: machen wir mal was mit Strings.

Beispiel 3: etwas off-tpoic, aber fällt unter, was sonst noch geht.












