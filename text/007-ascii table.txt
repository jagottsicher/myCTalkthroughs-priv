Make it nice and neat: Prepare you your own ASCII table

Pic: nice and neat smiling















My ASCII table program had several iterations. It’s easy to get carried away, but it’s also easy to be too skimpy on the information. This month’s Exercise is based on my current ASCII program, which has evolved over the years.

Coding this challenge doesn’t require a lot of advanced C programming knowledge. Still, having a handy ASCII table is a necessary thing if you want to confirm code values or explore interesting ASCII tricks.

Central to my solution is a for loop, though it goes only from 0 through 32 — one stick of an ASCII table. The loop contains four printf() statements, one for each stick.

The first printf() statement doesn’t output character values directly, as the control codes would foul the display. The second through fourth printf() statements increase the value output by 32 each time: +32, +64, and finally +96.
2021_08-Exercise.c

#include <stdio.h>

int main()
{
    int x;

    printf("Dec  Oct  Hex  C   \
 Dec  Oct  Hex  C  \
 Dec  Oct  Hex  C  \
 Dec  Oct  Hex  C\n");
    for( x=0; x<32; x++ )
    {
        printf("%3d  %3o  %3x  - | ",
                x, x, x
              );
        printf("%3d  %3o  %3x  %c | ",
                x+32, x+32, x+32, x+32
              );
        printf("%3d  %3o  %3x  %c | ",
                x+64, x+64, x+64, x+64
              );
        printf("%3d  %3o  %3x  %c \n",
                x+96, x+96, x+96, x+96
              );
    }

    return(0);
}

The initial printf() statement at Line 7, which outputs the header row, is split between lines. The backslash character extends the line, wrapping it around to the following line, but without an indent. The indent would become part of the string, which I don’t want. Still, be careful to mind the spaces required between the lines to ensure that the headings line up with the columns.

This source code’s program is named ascii and I keep in my personal bin directory so that I can always summon an ASCII table while I’m working.

I hope you concocted a useful ASCII table solution, using whatever methods or approach you deemed best. Remember, multiple solutions are always possible for any programming puzzle.
