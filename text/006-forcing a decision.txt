Hey User, we want you! Make a decision!
Pic: Uncle sam like: We want you...



















Programs often ask questions: yes-or-no and multiple choice. The user must select one of the given options, which I refer to as forcing a decision. Your goal as programmer is to pester the user to input a valid choice.

The easy and common way to resolve this pickle is to select a default option and, when the user is goofy, the default is selected.

For example, Linux installation scripts offer the user a Yes or No (what I call a “yorn”) option. If the user types anything other than Y or sometimes Y-E-S, computer says, “Okay, you mean ‘no'” and proceeds. This approach doesn’t really force a decision; it presents a default.

My approach for forcing a decision is to bury a switch-case structure within an endless while loop. A specific variable is required to ensure that the loop repeats until a correct choice is made. I consistently name this variable done because it makes the code read well:
2022_07_30-Lesson.c

#include <stdio.h>

int main()
{
    const int true=1,false=0;
    int ch,done;

    /* prepare for the loop */
    done = false;    /* the loop is not done at this point */

    while(!done)    /* "while not done" because
                       !done (not done) == TRUE */
    {
        printf("You must choose A, B, or C: ");
        ch = getchar();

        /* check their results */
        switch(ch)
        {
            /* check for both upper- and lowercase */
            case 'A':
            case 'a':
                /* do whatever */
                puts("Carrying out option A");
                /* end the loop condition */
                done = true;
                break;
            case 'B':
            case 'b':
                puts("Carrying out option B");
                done = true;
                break;
            case 'C':
            case 'c':
                puts("Carrying out option C");
                done = true;
                break;
            default:
                puts("Invalid choice");
                /* empty the stdin buffer */
                while( getchar()!='\n' )
                    ;
        }
    }
    puts("Thank you for behaving");

    return(0);
}

Variable done is initially set to FALSE (zero). As the while loop’s condition is !done (“not done”), it translates to TRUE, so the loop repeats until the value of done becomes FALSE.

Within the while loop, switch-case statements filter possible correct responses. If any of the six valid choices are input, the code outputs a confirmation text message (or does something more interesting in real life) and the value of done becomes TRUE. The loop is done.

The default condition handles any invalid input. An error message is output, then an inner while loop churns through whatever text lingers in the stdin input buffer until a newline is encountered:

while( getchar()!='\n' )
    ;

This statement gobbles the newline as well, which makes stream input behave in a familiar manner for the user.

Here’s a sample run:

You must choose A, B, or C: hello
Invalid choice
You must choose A, B, or C: d
Invalid choice
You must choose A, B, or C: a
Carrying out option A
Thank you for behaving

I wrote an Exercise years back that dealt with a similar situation, though only for “yorn” responses. It seems a bit clunky now that I look in the rearview mirror. The method presented in this post is far more elegant and can easily be adapted to any number of options for forcing a decision.
